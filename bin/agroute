#! /usr/bin/env node
// -*- js -*-

'use strict';

var info = require('../package.json');
var path = require('path');
var AgRoute = require('../lib/index');

var short_forms = {
    s: 'src',
    o: 'output',
    h: 'help',
    v: 'version',
};
var args = process.argv.slice(2);
var paths = [];
var output, src;
var specified = {};

while (args.length) {
    var arg = args.shift();
    if (arg[0] != '-') {
        paths.push(arg);
    } else if (arg == '--') {
        paths = paths.concat(args);
        break;
    } else if (arg[1] == '-') {
        process_option(arg.slice(2));
    } else
        [].forEach.call(arg.slice(1), function (letter, index, arg) {
            if (!(letter in short_forms)) fatal('invalid option -' + letter);
            process_option(short_forms[letter], index + 1 < arg.length);
        });
}

run();

function process_option(name, no_value) {
    console.log('name, no_value', name, no_value);
    specified[name] = true;
    switch (name) {
        case 'help':
            print(
                [
                    'Usage: uglifyjs [files...] [options]',
                    '',
                    'Options:',
                    '  -h, --help                               Print usage information.',
                    '                                           `--help options` for details on available options.',
                    '  -v, -V, --version                        Print version number.',
                    '  -p, --parse <options>                    Specify parser options.',
                    '  -c, --compress [options]                 Enable compressor/specify compressor options.',
                    '  -m, --mangle [options]                   Mangle names/specify mangler options.',
                    '  --mangle-props [options]                 Mangle properties/specify mangler options.',
                    '  -b, --beautify [options]                 Beautify output/specify output options.',
                    '  -O, --output-opts <options>              Output options (beautify disabled).',
                    '  -o, --output <file>                      Output file (default STDOUT).',
                    '  --annotations                            Process and preserve comment annotations.',
                    '  --no-annotations                         Ignore and discard comment annotations.',
                    '  --comments [filter]                      Preserve copyright comments in the output.',
                    '  --config-file <file>                     Read minify() options from JSON file.',
                    '  -d, --define <expr>[=value]              Global definitions.',
                    '  -e, --enclose [arg[,...][:value[,...]]]  Embed everything in a big function, with configurable argument(s) & value(s).',
                    '  --ie                                     Support non-standard Internet Explorer.',
                    '  --keep-fargs                             Do not mangle/drop function arguments.',
                    '  --keep-fnames                            Do not mangle/drop function names. Useful for code relying on Function.prototype.name.',
                    '  --module                                 Process input as ES module (implies --toplevel)',
                    '  --name-cache <file>                      File to hold mangled name mappings.',
                    '  --rename                                 Force symbol expansion.',
                    '  --no-rename                              Disable symbol expansion.',
                    '  --self                                   Build UglifyJS as a library (implies --wrap UglifyJS)',
                    '  --source-map [options]                   Enable source map/specify source map options.',
                    '  --timings                                Display operations run time on STDERR.',
                    '  --toplevel                               Compress and/or mangle variables in toplevel scope.',
                    '  --v8                                     Support non-standard Chrome & Node.js.',
                    '  --validate                               Perform validation during AST manipulations.',
                    '  --verbose                                Print diagnostic messages.',
                    '  --warn                                   Print warning messages.',
                    '  --webkit                                 Support non-standard Safari/Webkit.',
                    '  --wrap <name>                            Embed everything as a function with “exports” corresponding to “name” globally.',
                    '',
                    '(internal debug use only)',
                    '  --in-situ                                Warning: replaces original source files with minified output.',
                    '  --reduce-test                            Reduce a standalone test case (assumes cloned repository).',
                ].join('\n')
            );
            exit();
            break;
        case 'version':
            print(info.name + ' ' + info.version);
            exit();
            break;
        case 'output':
            output = read_value(true);
            break;
        case 'src':
            src = read_value(true);
            break;
        default:
            fatal('invalid option --' + name);
    }

    function read_value(required) {
        if (no_value || !args.length || args[0][0] == '-') {
            if (required) fatal('missing option argument for --' + name);
            return true;
        }
        return args.shift();
    }
}

function run() {
    if (!src || !output) {
        fatal('no value src, output');
    }
    const currentPath = process.cwd();

    console.log('run', src, output, __dirname, currentPath);
    AgRoute({
        src: path.join(currentPath, src),
        output: path.join(currentPath, output),
    });
}

function fatal(message) {
    if (message instanceof Error) {
        message = message.stack.replace(/^\S*?Error:/, 'ERROR:');
    } else {
        message = 'ERROR: ' + message;
    }
    print_error(message);
    process.exit(1);
}

function print_error(msg) {
    process.stderr.write(msg);
    process.stderr.write('\n');
}

function print(txt) {
    process.stdout.write(txt);
    process.stdout.write('\n');
}

function exit(arg) {
    process.exit(arg);
}
